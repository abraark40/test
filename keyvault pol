<#
.SYNOPSIS
    Lists all Key Vault access policies across all Azure subscriptions with RBAC role mapping
.DESCRIPTION
    This script enumerates all subscriptions accessible to the current user,
    then lists all Key Vaults and their access policies in each subscription,
    mapping permissions to the closest matching Azure RBAC role.
.NOTES
    File Name      : Get-AllKeyVaultAccessPoliciesWithRBAC.ps1
    Prerequisites  : Azure PowerShell module (Az)
#>

# Function to determine RBAC role based on permissions
function Get-KeyVaultRBACRole {
    param (
        [string[]]$KeyPermissions,
        [string[]]$SecretPermissions,
        [string[]]$CertPermissions
    )

    # Convert to lowercase for case-insensitive comparison
    $keyPerms = $KeyPermissions | ForEach-Object { $_.ToLower() }
    $secretPerms = $SecretPermissions | ForEach-Object { $_.ToLower() }
    $certPerms = $CertPermissions | ForEach-Object { $_.ToLower() }

    # Define all possible operations for each resource type
    $allKeyOps = @('get','list','create','update','delete','recover','backup','restore','import','export','purge','decrypt','encrypt','unwrapkey','wrapkey','verify','sign')
    $allSecretOps = @('get','list','set','delete','recover','backup','restore','purge')
    $allCertOps = @('get','list','create','update','delete','recover','backup','restore','import','export','purge','managecontacts','manageissuers','getissuers','listissuers','setissuers','deleteissuers')

    # Check for Administrator role (all permissions or wildcard)
    if (($keyPerms -contains 'all' -or ($keyPerms.Count -ge $allKeyOps.Count)) -and 
        ($secretPerms -contains 'all' -or ($secretPerms.Count -ge $allSecretOps.Count)) -and 
        ($certPerms -contains 'all' -or ($certPerms.Count -ge $allCertOps.Count))) {
        return "Key Vault Administrator"
    }

    # Check for Crypto Officer (Keys + Secrets)
    if ((($keyPerms -contains 'all') -or ($keyPerms.Count -ge $allKeyOps.Count)) -and 
        (($secretPerms -contains 'all') -or ($secretPerms.Count -ge $allSecretOps.Count)) -and 
        ($certPerms.Count -eq 0 -or $certPerms -eq $null)) {
        return "Key Vault Crypto Officer"
    }

    # Check for Secrets Officer (Secrets only)
    if ((($secretPerms -contains 'all') -or ($secretPerms.Count -ge $allSecretOps.Count)) -and 
        ($keyPerms.Count -eq 0 -or $keyPerms -eq $null) -and 
        ($certPerms.Count -eq 0 -or $certPerms -eq $null)) {
        return "Key Vault Secrets Officer"
    }

    # Check for Certificates Officer (Certificates only)
    if ((($certPerms -contains 'all') -or ($certPerms.Count -ge $allCertOps.Count)) -and 
        ($keyPerms.Count -eq 0 -or $keyPerms -eq $null) -and 
        ($secretPerms.Count -eq 0 -or $secretPerms -eq $null)) {
        return "Key Vault Certificates Officer"
    }

    # Check for Crypto Service Encryption User (specific key operations)
    $cryptoUserOps = @('get','list','wrapkey','unwrapkey')
    if (($keyPerms | Where-Object { $_ -in $cryptoUserOps }).Count -eq $cryptoUserOps.Count -and
        ($secretPerms.Count -eq 0 -or $secretPerms -eq $null) -and
        ($certPerms.Count -eq 0 -or $certPerms -eq $null)) {
        return "Key Vault Crypto Service Encryption User"
    }

    # If no standard role matches
    return "Custom (Non-Standard Permissions)"
}

# Clear the screen and show startup message
Clear-Host
Write-Host "=== Azure Key Vault Access Policy Reporter ===" -ForegroundColor Cyan
Write-Host "This script will check ALL subscriptions accessible to your account`n"

# Check Azure connection
try {
    $context = Get-AzContext -ErrorAction Stop
    if (-not $context) {
        Write-Host "Connecting to Azure..." -ForegroundColor Yellow
        Connect-AzAccount
    }
    Write-Host "Connected to Azure as: $((Get-AzContext).Account.Id)`n" -ForegroundColor Green
} catch {
    Write-Host "ERROR: Failed to connect to Azure. $_" -ForegroundColor Red
    exit
}

# Get all subscriptions
try {
    $subscriptions = Get-AzSubscription -ErrorAction Stop
    if (-not $subscriptions) {
        Write-Host "No Azure subscriptions found." -ForegroundColor Red
        exit
    }
} catch {
    Write-Host "ERROR: Failed to get subscriptions. $_" -ForegroundColor Red
    exit
}

# Prepare results array
$allAccessPolicies = @()

# Main processing loop
foreach ($sub in $subscriptions) {
    Write-Host "`nProcessing Subscription: $($sub.Name) ($($sub.Id))" -ForegroundColor Magenta
    Set-AzContext -Subscription $sub.Id | Out-Null

    # Get all Key Vaults in this subscription
    $keyVaults = Get-AzKeyVault -ErrorAction SilentlyContinue
    
    if (-not $keyVaults) {
        Write-Host "  No Key Vaults found in this subscription." -ForegroundColor Yellow
        continue
    }

    foreach ($kv in $keyVaults) {
        Write-Host "  Key Vault: $($kv.VaultName) (RG: $($kv.ResourceGroupName))" -ForegroundColor Cyan
        
        try {
            $policies = (Get-AzKeyVault -VaultName $kv.VaultName -ResourceGroupName $kv.ResourceGroupName).AccessPolicies
            
            if (-not $policies) {
                Write-Host "    No access policies found." -ForegroundColor Yellow
                continue
            }

            foreach ($policy in $policies) {
                # Resolve principal details
                $principalName = "Unknown"
                $principalType = "Unknown"
                
                try {
                    $sp = Get-AzADServicePrincipal -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                    if ($sp) {
                        $principalName = $sp.DisplayName
                        $principalType = "Service Principal"
                    } else {
                        $user = Get-AzADUser -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                        if ($user) {
                            $principalName = $user.DisplayName
                            $principalType = "User"
                        } else {
                            $group = Get-AzADGroup -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                            if ($group) {
                                $principalName = $group.DisplayName
                                $principalType = "Group"
                            }
                        }
                    }
                } catch {
                    Write-Host "    ⚠️ Could not resolve principal name for ObjectId: $($policy.ObjectId)" -ForegroundColor Yellow
                }

                # Determine RBAC role
                $rbacRole = Get-KeyVaultRBACRole -KeyPermissions $policy.PermissionsToKeys `
                                                 -SecretPermissions $policy.PermissionsToSecrets `
                                                 -CertPermissions $policy.PermissionsToCertificates

                # Add to results
                $allAccessPolicies += [PSCustomObject]@{
                    SubscriptionName  = $sub.Name
                    SubscriptionId    = $sub.Id
                    KeyVaultName      = $kv.VaultName
                    ResourceGroup     = $kv.ResourceGroupName
                    PrincipalName     = $principalName
                    PrincipalType     = $principalType
                    ObjectId          = $policy.ObjectId
                    ApplicationId     = $policy.ApplicationId
                    RBACRole          = $rbacRole
                    KeyRead           = $policy.PermissionsToKeys -contains "Get" -or $policy.PermissionsToKeys -contains "List"
                    KeyWrite          = $policy.PermissionsToKeys -contains "Create" -or $policy.PermissionsToKeys -contains "Set" -or $policy.PermissionsToKeys -contains "Delete"
                    SecretRead        = $policy.PermissionsToSecrets -contains "Get" -or $policy.PermissionsToSecrets -contains "List"
                    SecretWrite      = $policy.PermissionsToSecrets -contains "Set" -or $policy.PermissionsToSecrets -contains "Delete"
                    CertRead         = $policy.PermissionsToCertificates -contains "Get" -or $policy.PermissionsToCertificates -contains "List"
                    CertWrite        = $policy.PermissionsToCertificates -contains "Create" -or $policy.PermissionsToCertificates -contains "Import" -or $policy.PermissionsToCertificates -contains "Delete"
                    KeyPermissions   = ($policy.PermissionsToKeys -join ", ")
                    SecretPermissions = ($policy.PermissionsToSecrets -join ", ")
                    CertPermissions  = ($policy.PermissionsToCertificates -join ", ")
                }
            }
        } catch {
            Write-Host "    ❌ Failed to retrieve policies. Error: $_" -ForegroundColor Red
        }
    }
}

# Export results
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$outputPath = "AllSubs_KeyVaultAccessPolicies_$timestamp.csv"
$allAccessPolicies | Export-Csv -Path $outputPath -NoTypeInformation -Encoding UTF8

# Display summary
Write-Host "`n=== Processing Complete ===" -ForegroundColor Green
Write-Host "Total subscriptions processed: $($subscriptions.Count)"
Write-Host "Total Key Vaults found: $($allAccessPolicies.KeyVaultName | Select-Object -Unique | Measure-Object | Select-Object -ExpandProperty Count)"
Write-Host "Total access policies recorded: $($allAccessPolicies.Count)"
Write-Host "Results saved to: $outputPath`n"

# Show quick summary table
$allAccessPolicies | Select-Object -First 10 | Format-Table -Property SubscriptionName, KeyVaultName, PrincipalName, PrincipalType, RBACRole,
    @{Name="KeyR/W"; Expression={"$($_.KeyRead)/$($_.KeyWrite)"}}, 
    @{Name="SecretR/W"; Expression={"$($_.SecretRead)/$($_.SecretWrite)"}} -AutoSize

Write-Host "`nPress any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
