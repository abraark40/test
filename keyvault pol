# Set the subscription (optional: replace with your subscription ID or name)
$subscriptionId = "your-subscription-id-here"
Set-AzContext -SubscriptionId $subscriptionId

# Get all Key Vaults in the subscription
$allKeyVaults = Get-AzKeyVault

# Prepare an array to store the results
$allAccessPolicies = @()

# Loop through each Key Vault
foreach ($kv in $allKeyVaults) {
    $vaultName = $kv.VaultName
    $rg = $kv.ResourceGroupName

    Write-Host "Processing Key Vault: $vaultName in RG: $rg" -ForegroundColor Cyan

    try {
        # Get the access policies for this Key Vault
        $policies = (Get-AzKeyVault -VaultName $vaultName -ResourceGroupName $rg).AccessPolicies

        # Process each policy
        foreach ($policy in $policies) {
            # Try to resolve principal name
            $principalName = "Unknown"
            $principalType = "Unknown"
            
            try {
                # Check if it's a service principal
                $sp = Get-AzADServicePrincipal -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                if ($sp) {
                    $principalName = $sp.DisplayName
                    $principalType = "Service Principal"
                } else {
                    # Check if it's a user
                    $user = Get-AzADUser -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                    if ($user) {
                        $principalName = $user.DisplayName
                        $principalType = "User"
                    } else {
                        # Check if it's a group
                        $group = Get-AzADGroup -ObjectId $policy.ObjectId -ErrorAction SilentlyContinue
                        if ($group) {
                            $principalName = $group.DisplayName
                            $principalType = "Group"
                        }
                    }
                }
            } catch {
                Write-Host "  ⚠️ Could not resolve principal name for ObjectId: $($policy.ObjectId)" -ForegroundColor Yellow
            }

            # Add policy to results
            $allAccessPolicies += [PSCustomObject]@{
                KeyVaultName     = $vaultName
                ResourceGroup    = $rg
                PrincipalName    = $principalName
                PrincipalType    = $principalType
                ObjectId         = $policy.ObjectId
                ApplicationId    = $policy.ApplicationId
                KeyRead          = $policy.PermissionsToKeys -contains "Get" -or $policy.PermissionsToKeys -contains "List"
                KeyWrite         = $policy.PermissionsToKeys -contains "Create" -or $policy.PermissionsToKeys -contains "Set" -or $policy.PermissionsToKeys -contains "Delete"
                SecretRead       = $policy.PermissionsToSecrets -contains "Get" -or $policy.PermissionsToSecrets -contains "List"
                SecretWrite      = $policy.PermissionsToSecrets -contains "Set" -or $policy.PermissionsToSecrets -contains "Delete"
                CertRead         = $policy.PermissionsToCertificates -contains "Get" -or $policy.PermissionsToCertificates -contains "List"
                CertWrite       = $policy.PermissionsToCertificates -contains "Create" -or $policy.PermissionsToCertificates -contains "Import" -or $policy.PermissionsToCertificates -contains "Delete"
                KeyPermissions   = ($policy.PermissionsToKeys -join ", ")
                SecretPermissions = ($policy.PermissionsToSecrets -join ", ")
                CertPermissions = ($policy.PermissionsToCertificates -join ", ")
            }
        }
    } catch {
        Write-Host "❌ Failed to retrieve policies for Key Vault: $vaultName. Error: $_" -ForegroundColor Red
    }
}

# Export to CSV
$outputPath = "AllKeyVaultAccessPolicies.csv"
$allAccessPolicies | Export-Csv -Path $outputPath -NoTypeInformation -Encoding UTF8

# Display summary
Write-Host "`n=== Access Policy Summary ===" -ForegroundColor Green
$allAccessPolicies | Format-Table -Property KeyVaultName, PrincipalName, PrincipalType, 
    @{Name="KeyR/W"; Expression={"$($_.KeyRead)/$($_.KeyWrite)"}}, 
    @{Name="SecretR/W"; Expression={"$($_.SecretRead)/$($_.SecretWrite)"}}, 
    @{Name="CertR/W"; Expression={"$($_.CertRead)/$($_.CertWrite)"}} -AutoSize

Write-Host "`n✅ Export completed. File saved as '$outputPath'" -ForegroundColor Green
