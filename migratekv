<#
.SYNOPSIS
    COMPLETE MIGRATION: Converts Key Vault from access policy to RBAC model
.DESCRIPTION
    1. Migrates all access policies to RBAC roles (Key Vault Administrator)
    2. Switches Key Vault permission model to RBAC
    3. Removes legacy access policies
.NOTES
    Version: 3.0 (Complete Migration)
    Requirements: Owner or User Access Administrator + Key Vault Administrator
#>

param (
    [Parameter(Mandatory=$true)]
    [string]$SubscriptionId
)

# Connect to Azure
Write-Host "Connecting to Azure..." -ForegroundColor Cyan
Connect-AzAccount

# Set subscription context
try {
    Set-AzContext -SubscriptionId $SubscriptionId -ErrorAction Stop | Out-Null
    $subscription = Get-AzSubscription -SubscriptionId $SubscriptionId
    Write-Host "`nTARGET SUBSCRIPTION: $($subscription.Name) ($($subscription.Id))`n" -ForegroundColor Cyan
}
catch {
    Write-Host "❌ Error setting subscription context: $_" -ForegroundColor Red
    exit
}

# Initialize results
$results = @()
$vaultsUpdated = 0

# Get all Key Vaults
Write-Host "Discovering Key Vaults..." -ForegroundColor Cyan
$keyVaults = Get-AzKeyVault
if (-not $keyVaults) {
    Write-Host "No Key Vaults found." -ForegroundColor Yellow
    exit
}

# Process each Key Vault
foreach ($kv in $keyVaults) {
    Write-Host "`nPROCESSING KEY VAULT: $($kv.VaultName)" -ForegroundColor Magenta
    
    # Skip if already in RBAC mode
    if ($kv.EnableRbacAuthorization) {
        Write-Host "  ✓ Already in RBAC mode" -ForegroundColor Green
        continue
    }

    # Step 1: Migrate access policies to RBAC
    try {
        $policies = (Get-AzKeyVault -VaultName $kv.VaultName -ResourceGroupName $kv.ResourceGroupName).AccessPolicies
        $scope = "/subscriptions/$($subscription.Id)/resourceGroups/$($kv.ResourceGroupName)/providers/Microsoft.KeyVault/vaults/$($kv.VaultName)"
        
        foreach ($policy in $policies) {
            $principalName = try {
                (Get-AzADServicePrincipal -ObjectId $policy.ObjectId).DisplayName ??
                (Get-AzADUser -ObjectId $policy.ObjectId).DisplayName ??
                (Get-AzADGroup -ObjectId $policy.ObjectId).DisplayName ??
                $policy.ObjectId
            } catch { $policy.ObjectId }

            Write-Host "  Migrating principal: $principalName" -ForegroundColor Cyan

            try {
                # Assign Key Vault Administrator role
                $assignment = New-AzRoleAssignment -ObjectId $policy.ObjectId `
                                                  -RoleDefinitionName "Key Vault Administrator" `
                                                  -Scope $scope `
                                                  -ErrorAction Stop

                $results += [PSCustomObject]@{
                    KeyVault       = $kv.VaultName
                    Principal      = $principalName
                    ObjectId       = $policy.ObjectId
                    RBACAssignment = "Success"
                    PolicyRemoval  = "Pending"
                }
                Write-Host "    ✓ RBAC assigned" -ForegroundColor Green
            }
            catch {
                Write-Host "    ❌ RBAC assignment failed: $_" -ForegroundColor Red
                $results += [PSCustomObject]@{
                    KeyVault       = $kv.VaultName
                    Principal      = $principalName
                    ObjectId       = $policy.ObjectId
                    RBACAssignment = "Failed: $_"
                    PolicyRemoval  = "Skipped"
                }
                continue
            }
        }

        # Step 2: Enable RBAC mode on the Key Vault
        try {
            Write-Host "  Switching to RBAC permission model..." -ForegroundColor Cyan
            Update-AzKeyVault -VaultName $kv.VaultName `
                             -ResourceGroupName $kv.ResourceGroupName `
                             -EnableRbacAuthorization $true `
                             -ErrorAction Stop

            Write-Host "    ✓ RBAC mode enabled" -ForegroundColor Green
            $vaultsUpdated++

            # Step 3: Remove legacy access policies (only if RBAC mode succeeded)
            try {
                Write-Host "  Removing legacy access policies..." -ForegroundColor Cyan
                foreach ($policy in $policies) {
                    Remove-AzKeyVaultAccessPolicy -VaultName $kv.VaultName `
                                                 -ResourceGroupName $kv.ResourceGroupName `
                                                 -ObjectId $policy.ObjectId `
                                                 -ErrorAction SilentlyContinue
                }
                Write-Host "    ✓ Legacy policies removed" -ForegroundColor Green

                # Update results
                $results | Where-Object { 
                    $_.KeyVault -eq $kv.VaultName -and $_.PolicyRemoval -eq "Pending" 
                } | ForEach-Object { $_.PolicyRemoval = "Success" }
            }
            catch {
                Write-Host "    ❌ Policy removal failed: $_" -ForegroundColor Red
                $results | Where-Object { 
                    $_.KeyVault -eq $kv.VaultName -and $_.PolicyRemoval -eq "Pending" 
                } | ForEach-Object { $_.PolicyRemoval = "Failed: $_" }
            }
        }
        catch {
            Write-Host "    ❌ Failed to enable RBAC mode: $_" -ForegroundColor Red
            $results += [PSCustomObject]@{
                KeyVault       = $kv.VaultName
                Principal      = "N/A"
                ObjectId       = "N/A"
                RBACAssignment = "N/A"
                PolicyRemoval  = "RBAC mode enable failed: $_"
            }
        }
    }
    catch {
        Write-Host "  ❌ Error processing Key Vault: $_" -ForegroundColor Red
        $results += [PSCustomObject]@{
            KeyVault       = $kv.VaultName
            Principal      = "N/A"
            ObjectId       = "N/A"
            RBACAssignment = "Key Vault processing failed: $_"
            PolicyRemoval  = "N/A"
        }
    }
}

# Generate reports
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$reportPath = "KeyVaultRBACMigration_$timestamp.csv"
$results | Export-Csv -Path $reportPath -NoTypeInformation -Encoding UTF8

# Summary
Write-Host "`n=== MIGRATION COMPLETE ===" -ForegroundColor Green
Write-Host "Key Vaults processed: $($keyVaults.Count)"
Write-Host "Key Vaults updated to RBAC: $vaultsUpdated"
Write-Host "Total principals migrated: $($results.Where({$_.RBACAssignment -eq 'Success'}).Count)"
Write-Host "`nDetailed report saved to: $reportPath" -ForegroundColor Cyan

# Show sample results
$results | Select-Object -First 10 | Format-Table -AutoSize

Write-Host "`nPress any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
