<#
.SYNOPSIS
    Key Vault Access Policy to RBAC Migration Script (Azure PowerShell)
.DESCRIPTION
    Migrates Key Vaults from access policy to RBAC model while:
    1. Converting all access policies to RBAC roles (Key Vault Administrator)
    2. Switching permission model to RBAC
    3. Removing legacy access policies
.NOTES
    Version: 1.0 (Azure PowerShell Edition)
    Assumes: Already authenticated in Azure PowerShell environment
    Required Permissions: 
      - Key Vault Contributor
      - User Access Administrator (for RBAC assignments)
#>

param (
    [Parameter(Mandatory=$true)]
    [string]$SubscriptionId
)

# Initialize variables
$results = @()
$retryCount = 3
$currentContext = Get-AzContext

# Verify we're in Azure PowerShell
if (-not $currentContext) {
    Write-Host "ERROR: Not connected to Azure. Use Connect-AzAccount first." -ForegroundColor Red
    exit
}

Write-Host "Running as: $($currentContext.Account.Id)" -ForegroundColor Cyan
Write-Host "Target Subscription: $SubscriptionId" -ForegroundColor Cyan

# Set subscription context
try {
    Set-AzContext -Subscription $SubscriptionId -ErrorAction Stop | Out-Null
}
catch {
    Write-Host "ERROR: Failed to set subscription context: $_" -ForegroundColor Red
    exit
}

# Get all Key Vaults in the subscription
$keyVaults = Get-AzKeyVault
if (-not $keyVaults) {
    Write-Host "No Key Vaults found in this subscription." -ForegroundColor Yellow
    exit
}

foreach ($kv in $keyVaults) {
    Write-Host "`nProcessing Key Vault: $($kv.VaultName)" -ForegroundColor Magenta
    
    # Skip if already in RBAC mode
    if ($kv.EnableRbacAuthorization) {
        Write-Host "  ✓ Already in RBAC mode" -ForegroundColor Green
        continue
    }

    # Get current access policies
    try {
        $policies = (Get-AzKeyVault -VaultName $kv.VaultName -ResourceGroupName $kv.ResourceGroupName).AccessPolicies
        $scope = "/subscriptions/$SubscriptionId/resourceGroups/$($kv.ResourceGroupName)/providers/Microsoft.KeyVault/vaults/$($kv.VaultName)"
        
        # Step 1: Migrate each access policy to RBAC role
        foreach ($policy in $policies) {
            $principalName = try {
                (Get-AzADServicePrincipal -ObjectId $policy.ObjectId).DisplayName ??
                (Get-AzADUser -ObjectId $policy.ObjectId).DisplayName ??
                (Get-AzADGroup -ObjectId $policy.ObjectId).DisplayName ??
                $policy.ObjectId
            } catch { $policy.ObjectId }

            Write-Host "  Migrating principal: $principalName" -ForegroundColor Cyan

            try {
                # Assign Key Vault Administrator role
                $assignment = New-AzRoleAssignment -ObjectId $policy.ObjectId `
                                                  -RoleDefinitionName "Key Vault Administrator" `
                                                  -Scope $scope `
                                                  -ErrorAction Stop

                $results += [PSCustomObject]@{
                    KeyVault       = $kv.VaultName
                    Principal      = $principalName
                    ObjectId       = $policy.ObjectId
                    RBACAssignment = "Success"
                }
                Write-Host "    ✓ RBAC role assigned" -ForegroundColor Green
            }
            catch {
                $results += [PSCustomObject]@{
                    KeyVault       = $kv.VaultName
                    Principal      = $principalName
                    ObjectId       = $policy.ObjectId
                    RBACAssignment = "Failed: $_"
                }
                Write-Host "    ❌ RBAC assignment failed: $_" -ForegroundColor Red
                continue
            }
        }

        # Step 2: Enable RBAC permission model
        try {
            Write-Host "  Switching to RBAC permission model..." -ForegroundColor Cyan
            $updatedVault = $null
            
            for ($i = 1; $i -le $retryCount; $i++) {
                try {
                    $updatedVault = Update-AzKeyVault -VaultName $kv.VaultName `
                                                     -ResourceGroupName $kv.ResourceGroupName `
                                                     -EnableRbacAuthorization $true `
                                                     -ErrorAction Stop
                    break
                }
                catch {
                    if ($i -eq $retryCount) { throw }
                    Write-Host "    ⚠️ Attempt $i failed, retrying in 5 seconds..." -ForegroundColor Yellow
                    Start-Sleep -Seconds 5
                }
            }

            if ($updatedVault.EnableRbacAuthorization) {
                Write-Host "    ✓ RBAC permission model enabled" -ForegroundColor Green
                $results += [PSCustomObject]@{
                    KeyVault    = $kv.VaultName
                    RBACMode    = "Enabled"
                    Status      = "Success"
                }
            }
        }
        catch {
            Write-Host "    ❌ Failed to enable RBAC mode: $_" -ForegroundColor Red
            $results += [PSCustomObject]@{
                KeyVault    = $kv.VaultName
                RBACMode    = "Failed"
                Status      = "Error: $_"
            }
            continue
        }

        # Step 3: Remove legacy access policies (only if RBAC was enabled)
        if ($updatedVault -and $updatedVault.EnableRbacAuthorization) {
            try {
                Write-Host "  Removing legacy access policies..." -ForegroundColor Cyan
                foreach ($policy in $policies) {
                    Remove-AzKeyVaultAccessPolicy -VaultName $kv.VaultName `
                                                 -ResourceGroupName $kv.ResourceGroupName `
                                                 -ObjectId $policy.ObjectId `
                                                 -ErrorAction SilentlyContinue
                }
                Write-Host "    ✓ Legacy policies removed" -ForegroundColor Green
            }
            catch {
                Write-Host "    ⚠️ Policy cleanup failed: $_" -ForegroundColor Yellow
            }
        }
    }
    catch {
        Write-Host "  ❌ Error processing Key Vault: $_" -ForegroundColor Red
        $results += [PSCustomObject]@{
            KeyVault    = $kv.VaultName
            Status      = "Processing Error: $_"
        }
    }
}

# Generate report
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$reportPath = "KeyVaultRBACMigration_$timestamp.csv"
$results | Export-Csv -Path $reportPath -NoTypeInformation -Encoding UTF8

# Display summary
Write-Host "`n=== MIGRATION SUMMARY ===" -ForegroundColor Green
Write-Host "Key Vaults processed: $($keyVaults.Count)"
Write-Host "Successful RBAC assignments: $($results.Where({$_.RBACAssignment -eq 'Success'}).Count)"
Write-Host "Failed RBAC assignments: $($results.Where({$_.RBACAssignment -like 'Failed*'}).Count)"
Write-Host "Key Vaults switched to RBAC: $($results.Where({$_.RBACMode -eq 'Enabled'}).Count)"
Write-Host "`nFull report saved to: $reportPath" -ForegroundColor Cyan

# Show failures if any
$failures = $results | Where-Object { $_.Status -like "*Error*" -or $_.RBACAssignment -like "*Failed*" }
if ($failures) {
    Write-Host "`n=== FAILURES NEEDING ATTENTION ===" -ForegroundColor Red
    $failures | Format-Table -AutoSize
}
