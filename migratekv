<#
.SYNOPSIS
    Key Vault RBAC Migration Troubleshooter
.DESCRIPTION
    1. Identifies Key Vaults with access policies
    2. Attempts migration to RBAC
    3. Provides clear error details for manual fixes
#>

param (
    [Parameter(Mandatory=$true)]
    [string]$SubscriptionId
)

# 1. Verify Azure connection
try {
    $context = Get-AzContext
    if (-not $context) {
        Write-Host "ERROR: Not connected to Azure. Run Connect-AzAccount first." -ForegroundColor Red
        exit
    }
    Set-AzContext -Subscription $SubscriptionId | Out-Null
}
catch {
    Write-Host "ERROR: Failed to set subscription: $_" -ForegroundColor Red
    exit
}

# 2. Get all Key Vaults needing migration
$keyVaults = Get-AzKeyVault | Where-Object { -not $_.EnableRbacAuthorization }

if (-not $keyVaults) {
    Write-Host "All Key Vaults already use RBAC. No migration needed." -ForegroundColor Green
    exit
}

# 3. Migration function
foreach ($kv in $keyVaults) {
    Write-Host "`nProcessing $($kv.VaultName)..." -ForegroundColor Cyan
    
    try {
        # A. Get current policies
        $policies = (Get-AzKeyVault -VaultName $kv.VaultName).AccessPolicies
        
        # B. Assign RBAC roles
        foreach ($policy in $policies) {
            $principalName = try {
                (Get-AzADServicePrincipal -ObjectId $policy.ObjectId).DisplayName ??
                (Get-AzADUser -ObjectId $policy.ObjectId).DisplayName ??
                $policy.ObjectId
            } catch { $policy.ObjectId }

            Write-Host "  Migrating $principalName"

            try {
                $scope = "/subscriptions/$SubscriptionId/resourceGroups/$($kv.ResourceGroupName)/providers/Microsoft.KeyVault/vaults/$($kv.VaultName)"
                New-AzRoleAssignment -ObjectId $policy.ObjectId `
                                    -RoleDefinitionName "Key Vault Administrator" `
                                    -Scope $scope | Out-Null
                Write-Host "    ✓ Assigned RBAC role" -ForegroundColor Green
            }
            catch {
                Write-Host "    ❌ RBAC assignment failed: $_" -ForegroundColor Red
                Write-Host "    MANUAL FIX: Go to Azure Portal > Key Vault > IAM" -ForegroundColor Yellow
                Write-Host "    Add 'Key Vault Administrator' to $($policy.ObjectId)" -ForegroundColor Yellow
                continue
            }
        }

        # C. Switch to RBAC mode
        try {
            Update-AzKeyVault -VaultName $kv.VaultName `
                             -EnableRbacAuthorization $true | Out-Null
            Write-Host "  ✓ Switched to RBAC mode" -ForegroundColor Green
            
            # D. Cleanup policies (only if RBAC succeeded)
            foreach ($policy in $policies) {
                Remove-AzKeyVaultAccessPolicy -VaultName $kv.VaultName `
                                             -ObjectId $policy.ObjectId `
                                             -ErrorAction SilentlyContinue
            }
        }
        catch {
            Write-Host "  ❌ Failed to enable RBAC: $_" -ForegroundColor Red
            Write-Host "  MANUAL FIX REQUIRED:" -ForegroundColor Yellow
            Write-Host "  1. Go to Azure Portal > Key Vault > $($kv.VaultName)" -ForegroundColor Cyan
            Write-Host "  2. Navigate to 'Access Configuration'" -ForegroundColor Cyan
            Write-Host "  3. Select 'Azure role-based access control'" -ForegroundColor Cyan
            Write-Host "  4. Click 'Save'" -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "  ❌ Error processing vault: $_" -ForegroundColor Red
    }
}

Write-Host "`nMigration attempt completed. Check above for any manual steps needed." -ForegroundColor Cyan
